{*******************************************************}
{                      Be More Web                      }
{          Início do projeto 26/02/2025 17:02           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2025                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Mmodel.DAO.Calcular.Valor.Parcela.Imp;

interface

uses
  Data.DB,
  Vcl.Dialogs,
  System.SysUtils,

  Model.DAO.Calcular.Valor.Parcela.Interfaces,
  Model.Entidade.Calcular.Valor.Parcela.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Conexao.Query.Interfaces;

type
  TDAOCalcularValorParcela = class(TInterfacedObject, iDAOCalcularValorParcela)
    private
      FCalcularValorParcela : iEntidadeCalcularValorParcela<iDAOCalcularValorParcela>;
      FConexao        : iConexao;
      FDataSet        : TDataSet;
      FQuery          : iQuery;

   public
     constructor Create;
     destructor Destroy; override;
     class function New : iDAOCalcularValorParcela;

     function DataSet    (DataSource : TDataSource) : iDAOCalcularValorParcela; overload;
     function DataSet                               : TDataSet;                 overload;
     function CalcularValorParcela                  : iDAOCalcularValorParcela;

     function This : iEntidadeCalcularValorParcela<iDAOCalcularValorParcela>;
  end;

implementation

uses
  Model.Entidade.Calcular.Valor.Parcela.Imp,
  Model.Conexao.Firedac.Firebird.Imp,
  Model.Conexao.Query.Imp;

{ TDAOCalcularValorParcela }

constructor TDAOCalcularValorParcela.Create;
begin
  FConexao := TModelConexaoFiredacFirebird.New;
  FQuery   := TQuery.New;
end;

destructor TDAOCalcularValorParcela.Destroy;
begin
  inherited;
end;

class function TDAOCalcularValorParcela.New: iDAOCalcularValorParcela;
begin
  Result := Self.Create;
end;

function TDAOCalcularValorParcela.DataSet(DataSource: TDataSource): iDAOCalcularValorParcela;
begin
  Result := Self;
  if not Assigned(FDataset) then
    DataSource.DataSet := FQuery.DataSet
  else
    DataSource.DataSet := FDataSet;
end;

function TDAOCalcularValorParcela.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAOCalcularValorParcela.CalcularValorParcela: iDAOCalcularValorParcela;
begin
  Result := Self;
  try
    FDataSet := FQuery
                  .SQL('WITH Parcelas AS ( ' +
                       '    SELECT p.total, p.id, pp.qtde_pgto AS qtdepagto, ' +
                       '           ipp.num_pgto AS numeroparcela, ' +
                       '           COALESCE(CAST((p.total / pp.qtde_pgto) AS NUMERIC(18,3)), 0) AS valorparcela ' +
                       '    FROM cad_prazo pp ' +
                       '    INNER JOIN cad_ped p ON p.cod_pgto = pp.cod_prazo ' +
                       '    INNER JOIN cad_item_prazo ipp ON ipp.codigo = pp.cod_prazo ' +
                       '    WHERE pp.cod_prazo = :Id ' +
                       '      and p.id = : IdPedido '+
                       '), SomaParcelas AS ( ' +
                       '    SELECT p.id, p.total, SUM(CAST((p.total / pp.qtde_pgto) AS NUMERIC(18,3))) AS soma_parcelas ' +
                       '    FROM cad_prazo pp ' +
                       '    INNER JOIN cad_ped p ON p.cod_pgto = pp.cod_prazo ' +
                       '    INNER JOIN cad_item_prazo ipp ON ipp.codigo = pp.cod_prazo ' +
                       '    WHERE pp.cod_prazo = :Id ' +
                       '      and p.id =: IdPedido '+
                       '    GROUP BY p.id, p.total ' +
                       ') ' +
                       'SELECT parc.total, parc.id, parc.qtdepagto, parc.numeroparcela, ' +
                       '       CASE WHEN parc.numeroparcela = parc.qtdepagto THEN ' +
                       '            parc.valorparcela + (sp.total - sp.soma_parcelas) ' +
                       '       ELSE parc.valorparcela END AS valorparcela, ' +
                       '       NULL AS somadasparcelas ' +
                       'FROM Parcelas parc ' +
                       'JOIN SomaParcelas sp ON parc.id = sp.id ' +
                       'UNION ALL ' +
                       'SELECT NULL, NULL, NULL, NULL, NULL, COALESCE(SUM(sp.soma_parcelas), 0) ' +
                       'FROM SomaParcelas sp;')
                    .Params('Id', FCalcularValorParcela.PrazoPagamentoItens.Id) // Parâmetro vindo do objeto
                    .Params('IdPedido', FCalcularValorParcela.PrazoPagamentoItens.Pedidos.Id)
                  .Open
                  .DataSet;
  if not FDataSet.IsEmpty then
    FCalcularValorParcela.ValorParcela(FDataSet.FieldByName('ValorParcela').AsCurrency)
    else
    ShowMessage('Registro não encontrado!');
  except
    on E: Exception do
    begin
      FCalcularValorParcela.ValorParcela(0);
      Abort;
    end;
  end;
end;

function TDAOCalcularValorParcela.This: iEntidadeCalcularValorParcela<iDAOCalcularValorParcela>;
begin
  Result := FCalcularValorParcela;
end;

end.
